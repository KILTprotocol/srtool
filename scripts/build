#!/usr/bin/env bash

# If the user sends a SIGINT, we want to exit the entire script
trap "exit" INT

# This is where docker expects our substrate/polkadot repo to be
cd /build

echo "üß∞ Substrate Runtime Toolbox üß∞"

# srtool only makes sense when called from a Cargo folder
if [ ! -f Cargo.toml ]; then
    echo "  !!! The folder on your host computer does not look like a Cargo project. Are you really in your repo?"
    exit 1
fi

if [ ! -z "$VERBOSE" ]
then
    echo "Checking cache size. Give it a few seconds..."
    echo -e "üì¶ Cache size:" `du -sh $HOME/.cargo`
fi

echo -e "üèó  Building $PACKAGE as $PROFILE"
echo -e "‚è≥ That can take a little while, be patient... Subsequent builds will be faster."

# Build the runtime and time it :)
time cargo build --$PROFILE -p $PACKAGE --target-dir srtool

# The following would be nice but not in rust stable yet
#--out-dir srtool-out

echo "‚ú® Your Substrate WASM Runtime is ready! ‚ú®"

#WASM=`find . -type f -name *.wasm | grep $PROFILE | grep -v deps | grep compact | head -1`
WASM=`find ./srtool/$PROFILE/wbuild/$PACKAGE/*.compact.wasm`
HASH=`shasum -a 256 $WASM | awk '{print $1}'`

SIZE=`wc -c < $WASM`
LENGTH=16
SKIP=`echo $(($SIZE-$LENGTH))`
# Some magic to show the first and last bytes of the blog as the UI does
PREVIEW=`printf "0x"; hexdump -n $LENGTH -ve '1/1 "%.2x"' $WASM; printf "..."; hexdump -n $LENGTH -s $SKIP -ve '1/1 "%.2x"' $WASM`

YELLOW='\033[0;33m'
NC='\033[0m'

echo "Summary:"
echo "  Used" `rustc -V`
echo "  Wasm   : $WASM"
echo "  Content: $PREVIEW" 
echo "  Size   :" `du -sh $WASM | awk '{print $1}'`
printf "  SHA256 : ${YELLOW}$HASH${NC}\n" 
