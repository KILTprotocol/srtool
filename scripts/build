#!/usr/bin/env bash

# If the user sends a SIGINT, we want to exit the entire script
trap "exit" INT

# This is where docker expects our substrate/polkadot repo to be
cd /build

echo "üß∞ Substrate Runtime Toolbox üß∞"
echo "        - by Chevdor -"

# srtool only makes sense when called from a Cargo folder so we check that
if [ ! -f Cargo.toml ]; then
    echo "  !!! The folder on your host computer does not look like a Cargo project. Are you really in your repo?"
    exit 1
fi

if [ ! -z "$VERBOSE" ]; then
    echo "Checking cache size. Give it a few seconds..."
    echo -e "üì¶ Cache size:" `du -sh $HOME/.cargo`
fi

RUSTCV=`rustc -V`

echo -e "üèó  Building $PACKAGE as $PROFILE using $RUSTCV" 
echo -e "‚è≥ That can take a little while, be patient... subsequent builds will be faster."
echo -e "   Since you have to wait a little, you may want to learn more about Substrate runtimes:"
echo -e "   https://substrate.dev/docs/en/runtime/architecture-of-a-runtime"

# Build the runtime and time it :)
CMD="cargo build --$PROFILE -p $PACKAGE --target-dir target/srtool"
if [ ! -z "$VERBOSE" ]; then
    time $CMD
else
    $CMD
fi

# The following would be nice but not in rust stable yet
#--out-dir srtool-out

echo "‚ú® Your Substrate WASM Runtime is ready! ‚ú®"

#WASM=`find . -type f -name *.wasm | grep $PROFILE | grep -v deps | grep compact | head -1`
WASM=`find ./target/srtool/$PROFILE/wbuild/$PACKAGE/*.compact.wasm`
HASH=`shasum -a 256 $WASM | awk '{print $1}'`

SIZE=`wc -c < $WASM`
LENGTH=16
SKIP=`echo $(($SIZE-$LENGTH))`
# Some magic to show the first and last bytes of the blob the same way the UI does when you see
# a setCode coming from a motion or referendun
PREVIEW=`printf "0x"; hexdump -n $LENGTH -ve '1/1 "%.2x"' $WASM; printf "..."; hexdump -n $LENGTH -s $SKIP -ve '1/1 "%.2x"' $WASM`

YELLOW='\033[0;33m'
NC='\033[0m'
MB=`du -sh $WASM | awk '{print $1}'`
SZ=`du -sb $WASM | awk '{print $1}'`
TMSP=`date --utc +%FT%TZ`

if [[ "$*" == *"--json"* ]]
then
    JSON=$( jq -n \
        --arg gen "srtool" \
        --arg rustc "$RUSTCV" \
        --arg bytes "$SZ" \
        --arg wasm "$WASM" \
        --arg hash "$HASH" \
        --arg tmsp "$TMSP" \
        '{gen: $gen, rustc: $rustc, wasm: $wasm, size: $bytes, hash: $hash, tmsp: $tmsp}' )
    echo "$JSON"      
    if [[ "$*" == *"--save"* ]]
    then
        REPORT="./target/srtool/srtool-wasm-report-$TMSP.txt"
        echo "$JSON" > $REPORT
        echo "Report saved in $REPORT"
    fi      
else
    echo "Summary:"
    echo "  Tmsp    : $TMSP" 
    echo "  Rustc   : $RUSTCV" 
    echo "  Size    : $MB ($SZ)" 
    echo "  Content : $PREVIEW" 
    printf "  SHA256  : ${YELLOW}$HASH${NC}\n" 
    echo "  Wasm    : $WASM"
fi

